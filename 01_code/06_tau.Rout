
R version 3.4.2 (2017-09-28) -- "Short Summer"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ### SETUP ###
> 
> rm(list=ls())
> 
> sourceFiles <- list.files("source/")
> for (i in sourceFiles) {
+   source(paste0("source/", i))
+ }
> 
> # devtools::install_github("timelyportfolio/d3treeR")
> libs <- c('tidyverse', 'latex2exp', 'ggrepel', 'ggthemes', "scales", "treemap", 
+           "data.tree", "jsonlite", "ggraph", "igraph", "viridis")
> ipak(libs)
Loading required package: tidyverse
── Attaching packages ─────────────────────────────────────── tidyverse 1.2.1 ──
✔ ggplot2 3.1.0       ✔ purrr   0.3.2  
✔ tibble  2.1.1       ✔ dplyr   0.8.0.1
✔ tidyr   0.8.3       ✔ stringr 1.4.0  
✔ readr   1.1.1       ✔ forcats 0.2.0  
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
Loading required package: latex2exp
Loading required package: ggrepel
Loading required package: ggthemes
Loading required package: scales

Attaching package: ‘scales’

The following object is masked from ‘package:purrr’:

    discard

The following object is masked from ‘package:readr’:

    col_factor

Loading required package: treemap
Loading required package: data.tree
Loading required package: jsonlite

Attaching package: ‘jsonlite’

The following object is masked from ‘package:purrr’:

    flatten

Loading required package: ggraph
Loading required package: igraph

Attaching package: ‘igraph’

The following objects are masked from ‘package:dplyr’:

    as_data_frame, groups, union

The following objects are masked from ‘package:purrr’:

    compose, simplify

The following object is masked from ‘package:tidyr’:

    crossing

The following object is masked from ‘package:tibble’:

    as_data_frame

The following objects are masked from ‘package:stats’:

    decompose, spectrum

The following object is masked from ‘package:base’:

    union

Loading required package: viridis
Loading required package: viridisLite

Attaching package: ‘viridis’

The following object is masked from ‘package:scales’:

    viridis_pal

tidyverse latex2exp   ggrepel  ggthemes    scales   treemap data.tree  jsonlite 
     TRUE      TRUE      TRUE      TRUE      TRUE      TRUE      TRUE      TRUE 
   ggraph    igraph   viridis 
     TRUE      TRUE      TRUE 
There were 15 warnings (use warnings() to see them)
> 
> source("params.R")
> 
> ### DATA ###
> 
> # flows and predicted costs
> if (EUD==FALSE) {
+   if (tpspC==FALSE) {
+     X <- read_csv('clean/delta.csv') %>% filter(year==Y)
+   } else {
+     X <- read_csv('clean/deltaTPSP.csv') %>% filter(year==Y)
+   }
+ } else {
+   X <- read_csv('clean/deltaEUD.csv') %>% filter(year==Y)
+ }
Parsed with column specification:
cols(
  i_iso3 = col_character(),
  j_iso3 = col_character(),
  year = col_integer(),
  fob = col_double(),
  freight = col_double(),
  cif = col_double(),
  avc = col_double()
)
> # X %>% pull(j_iso3) %>% unique() %>% sort()
> 
> # prices
> if (EUD==FALSE) {
+   if (tpspC==FALSE) {
+     P <- read_csv('clean/priceIndex.csv') %>% select(iso3, year, priceIndex) %>% filter(year==Y)
+     Tshare <- read_csv('clean/priceIndex.csv') %>% select(iso3, year, Tshare) %>% filter(year==Y)
+   } else {
+     P <- read_csv('clean/priceIndexTPSP.csv') %>% select(iso3, year, priceIndex) %>% filter(year==Y)
+     Tshare <- read_csv('clean/priceIndexTPSP.csv') %>% select(iso3, year, Tshare) %>% filter(year==Y)
+   }
+ } else {
+   P <- read_csv('clean/priceIndexEUD.csv') %>% select(iso3, year, priceIndex) %>% filter(year==Y)
+   Tshare <- read_csv('clean/priceIndexEUD.csv') %>% select(iso3, year, Tshare) %>% filter(year==Y)
+ }
Parsed with column specification:
cols(
  iso3 = col_character(),
  expT = col_double(),
  priceIndex = col_double(),
  gdpUSD = col_double(),
  netExports = col_double(),
  expUSD = col_double(),
  Tshare = col_double(),
  pop = col_double(),
  gdppc = col_double(),
  year = col_integer()
)
Parsed with column specification:
cols(
  iso3 = col_character(),
  expT = col_double(),
  priceIndex = col_double(),
  gdpUSD = col_double(),
  netExports = col_double(),
  expUSD = col_double(),
  Tshare = col_double(),
  pop = col_double(),
  gdppc = col_double(),
  year = col_integer()
)
> 
> # gross consumption
> if (EUD==FALSE) {
+   if (tpspC==FALSE) {
+     gc <- read_csv("clean/gc.csv") %>% filter(year==Y)
+   } else {
+     gc <- read_csv("clean/gcTPSP.csv") %>% filter(year==Y)
+   }
+ } else {
+   gc <- read_csv("clean/gcEUD.csv") %>% filter(year==Y)
+ }
Parsed with column specification:
cols(
  iso3 = col_character(),
  year = col_integer(),
  gc = col_double()
)
> 
> gc$gc <- gc$gc * 1000
> colnames(gc)[colnames(gc)=="gc"] <- "j_tot_exp"
> 
> # gdp
> if (EUD==FALSE) {
+   if (tpspC==FALSE) {
+     gdp <- read_csv("clean/gdp.csv") %>% filter(year==Y)
+   } else {
+     gdp <- read_csv("clean/gdpTPSP.csv") %>% filter(year==Y)
+   }
+ } else {
+   gdp <- read_csv("clean/gdpEUD.csv") %>% filter(year==Y)
+ }
Parsed with column specification:
cols(
  iso3 = col_character(),
  year = col_integer(),
  gdp = col_double(),
  deficit = col_double(),
  exp = col_double()
)
> # gdp %>% arrange(desc(gdp))
> 
> gdp$exp <- gdp$exp * 1000
> gdp$gdp <- gdp$gdp * 1000
> gdp <- left_join(gdp, Tshare)
Joining, by = c("iso3", "year")
> gdp$expS <- gdp$gdp * (1 - gdp$Tshare)
> 
> # deficits in cif
> ccodes <- X$j_iso3 %>% unique() %>% sort()
> cifD <- deficit(X, "cif", ccodes)
Warning message:
`as_tibble.matrix()` requires a matrix with column names or a `.name_repair` argument. Using compatibility `.name_repair`.
This warning is displayed once per session. 
> 
> gdpR <- left_join(gdp, gc)
Joining, by = c("iso3", "year")
> gdpR <- gdpR %>% select(iso3, year, j_tot_exp, exp, expS, Tshare)
> colnames(gdpR)[colnames(gdpR)=="exp"] <- "j_con_exp"
> colnames(gdpR)[colnames(gdpR)=="expS"] <- "j_expS"
> colnames(gdpR)[colnames(gdpR)=="Tshare"] <- "j_Tshare"
> gdpR$j_gcT <- gdpR$j_tot_exp - gdpR$j_expS
> gdpR <- left_join(gdpR, cifD)
Joining, by = "iso3"
> colnames(gdpR)[colnames(gdpR)=="deficit"] <- "j_deficit"
> 
> gdp <- gdp %>% select(iso3, year, expS)
> colnames(gdp)[colnames(gdp)=="expS"] <- "j_expS"
> 
> # get home_exp and own share
> X <- left_join(X, gc, by=c("year"="year", "j_iso3"="iso3"))
> colnames(gc)[colnames(gc)=="j_tot_exp"] <- "i_tot_exp"
> X <- left_join(X, gc, by=c("year"="year", "i_iso3"="iso3"))
> X$delta <- X$avc
> X$val <- X$fob
> 
> # correct for tradable shares
> X <- left_join(X, gdp, by=c("year"="year", "j_iso3"="iso3"))
> colnames(gdp)[colnames(gdp)=="j_expS"] <- "i_expS"
> X <- left_join(X, gdp, by=c("year"="year", "i_iso3"="iso3"))
> X$j_gcT <- X$j_tot_exp - X$j_expS
> X$i_gcT <- X$i_tot_exp - X$i_expS
> 
> Ximp <- X %>% group_by(j_iso3, year) %>%
+   summarise(j_tot_imp=sum(cif),
+             j_gcT=mean(j_gcT))
> 
> Ximp$j_home_expT <- Ximp$j_gcT - Ximp$j_tot_imp
> Ximp <- Ximp %>% select(j_iso3, year, j_home_expT)
> 
> X <- left_join(X, Ximp, by=c("j_iso3", "year"))
> 
> colnames(Ximp) <- c("i_iso3", "year", "i_home_expT")
> 
> X <- left_join(X, Ximp, by=c("i_iso3", "year"))
> 
> # calculate shares of total tradable expenditure
> X$Lji <- X$cif / X$j_gcT
> 
> # initialize starting values for home expenditure
> X$Lii <- X$i_home_expT / X$i_gcT  
> X$Ljj <- X$j_home_expT / X$j_gcT
> 
> # append price indices
> colnames(P) <- c("i_iso3", "year", "Pi")
> X <- left_join(X, P)
Joining, by = c("i_iso3", "year")
> colnames(P) <- c("j_iso3", "year", "Pj")
> X <- left_join(X, P)
Joining, by = c("j_iso3", "year")
> 
> X <- X %>% arrange(j_iso3, i_iso3)
> 
> # calculate taus and lambda_iis jointly
> if (tauRev==FALSE) {
+   X <- X %>% tauLambda(theta, "tau", "Lii", "Ljj")
+   X$LiiAlt <- X$Lii
+   X$LjjAlt <- X$Ljj
+   X <- X %>% tauLambda(thetaAlt, "tauAlt", "LiiAlt","LjjAlt")
+ } else {
+   if (EUD==FALSE) {
+     print('hello')
+     colnames(gdpR)[colnames(gdpR)=="iso3"] <- "j_iso3"
+     XgdpR <- tauLambdaRev(X, gdpR, theta, mu)
+     X <- XgdpR[[1]]
+     gdpR <- XgdpR[[2]]
+     X$tauAlt <- X$tau
+   }
+ }
[1] "hello"
Joining, by = c("j_iso3", "year")
Joining, by = c("i_iso3", "year")
Joining, by = c("j_iso3", "year")
Joining, by = c("i_iso3", "year")
Joining, by = c("j_iso3", "year")
Joining, by = c("i_iso3", "year")
Joining, by = c("j_iso3", "year")
Joining, by = c("i_iso3", "year")
Joining, by = c("j_iso3", "year")
Joining, by = c("i_iso3", "year")
Joining, by = c("j_iso3", "year")
Joining, by = c("i_iso3", "year")
Joining, by = c("j_iso3", "year")
Joining, by = c("i_iso3", "year")
Joining, by = c("j_iso3", "year")
Joining, by = c("i_iso3", "year")
Joining, by = c("j_iso3", "year")
Joining, by = c("i_iso3", "year")
Joining, by = c("j_iso3", "year")
Joining, by = c("i_iso3", "year")
> 
> # export trade shares (in pc value)
> Xshares <- X %>% select(i_iso3, j_iso3, year, tau, Lji, Ljj, j_gcT, i_gcT)
> # Xshares %>% group_by(j_iso3) %>% summarise(test1=sum(Lji*tau), test2=mean(Ljj))
> # Xshares %>% summary()
> # Xshares %>% filter(j_iso3=="VNM") %>% print(n=100)
> 
> if (EUD==FALSE) {
+   if (tauRev==FALSE) {
+     write_csv(Xshares, "clean/shares.csv")
+   } else {
+     if (tpspC==FALSE) {
+       write_csv(Xshares, "clean/sharesTR.csv")
+     } else {
+       write_csv(Xshares, "clean/sharesTRTPSP.csv")
+     }
+   }
+ } else {
+   write_csv(Xshares, "clean/sharesEUD.csv")
+ }
> 
> # export deficits
> if (tauRev==TRUE) {
+   d <- gdpR %>% select(j_iso3, j_deficit)
+   colnames(d) <- c("iso3", "deficit")
+   if (tpspC==FALSE) {
+     write_csv(d, "clean/dTR.csv")
+   } else {
+     write_csv(d, "clean/dTRTPSP.csv")
+   }
+ }
> 
> # export policies
> Xtau <- X %>% select(i_iso3, j_iso3, year, tau, tauAlt)
> 
> if (EUD==TRUE) {
+   XEU <- X %>% filter(j_iso3 %in% EU27 & i_iso3 %in% EU27)
+ }
> 
> # export
> if (EUD==FALSE) {
+   if (tauRev==FALSE) {
+     write_csv(Xtau, "results/tauY.csv")
+   } else {
+     if (tpspC==FALSE) {
+       write_csv(Xtau, "results/tauYTR.csv")
+     } else {
+       print('hello')
+       write_csv(Xtau, "results/tauYTRTPSP.csv")
+     }
+   }
+ } else {
+   write_csv(Xtau, "results/tauYEUD.csv")
+ }
[1] "hello"
> Xtau %>% print(n=100)
# A tibble: 30 x 5
   i_iso3 j_iso3  year   tau tauAlt
   <chr>  <chr>  <int> <dbl>  <dbl>
 1 EU     CHN     2011 1.63   1.63 
 2 JPN    CHN     2011 1.49   1.49 
 3 ROW    CHN     2011 1.26   1.26 
 4 RUS    CHN     2011 3.62   3.62 
 5 USA    CHN     2011 2.19   2.19 
 6 CHN    EU      2011 2.75   2.75 
 7 JPN    EU      2011 2.26   2.26 
 8 ROW    EU      2011 1.69   1.69 
 9 RUS    EU      2011 3.55   3.55 
10 USA    EU      2011 2.62   2.62 
11 CHN    JPN     2011 3.08   3.08 
12 EU     JPN     2011 2.58   2.58 
13 ROW    JPN     2011 1.88   1.88 
14 RUS    JPN     2011 5.64   5.64 
15 USA    JPN     2011 3.11   3.11 
16 CHN    ROW     2011 2.31   2.31 
17 EU     ROW     2011 1.58   1.58 
18 JPN    ROW     2011 1.71   1.71 
19 RUS    ROW     2011 3.82   3.82 
20 USA    ROW     2011 2.01   2.01 
21 CHN    RUS     2011 1.74   1.74 
22 EU     RUS     2011 0.998  0.998
23 JPN    RUS     2011 1.39   1.39 
24 ROW    RUS     2011 1.14   1.14 
25 USA    RUS     2011 1.96   1.96 
26 CHN    USA     2011 2.29   2.29 
27 EU     USA     2011 1.69   1.69 
28 JPN    USA     2011 1.80   1.80 
29 ROW    USA     2011 1.39   1.39 
30 RUS    USA     2011 4.46   4.46 
> 
> 
> # calculate TRI and MAI
> # gc weights, reflects value of markets, not value of trade
> TRI <- X %>% filter(i_iso3 != j_iso3) %>% group_by(j_iso3, year) %>%
+   summarise(
+     tau=weighted.mean(tau, i_gcT, na.rm = T)
+   )
> TRI$i_iso3 <- "TRI"
> 
> MAI <- X %>% filter(i_iso3 != j_iso3) %>% group_by(i_iso3, year) %>%
+   summarise(
+     tau=weighted.mean(tau, j_gcT, na.rm=T)
+   )
> MAI$j_iso3 <- "MAI"
> 
> if (EUD==TRUE) {
+   
+   # TRI within EU
+   TRIEU <- XEU %>% filter(i_iso3 != j_iso3) %>% group_by(j_iso3, year) %>%
+     summarise(
+       tau=weighted.mean(tau, i_gcT, na.rm = T)
+     )
+   TRIEU$i_iso3 <- "TRI"
+   colnames(TRIEU)[colnames(TRIEU)=="tau"] <- "tauEU"
+   
+   # TRI within EU compared to overall TRI
+   TRIEUOut <- X %>% filter(j_iso3 %in% EU27 & !(i_iso3 %in% EU27)) %>% group_by(j_iso3, year) %>%
+     summarise(
+       tau=weighted.mean(tau, i_gcT, na.rm = T)
+     )
+   colnames(TRIEUOut)[colnames(TRIEUOut)=="tau"] <- "tauEUOut"
+   TRIEU <- left_join(TRIEU, TRIEUOut)
+   TRIEU$tauFrac <- (TRIEU$tauEU - 1) / (TRIEU$tauEUOut - 1)
+   
+   MAIEU <- XEU %>% filter(i_iso3 != j_iso3) %>% group_by(i_iso3, year) %>%
+     summarise(
+       tau=weighted.mean(tau, j_gcT, na.rm=T)
+     )
+   MAIEU$j_iso3 <- "MAI"
+   
+ }
> 
> ### PLOTS ###
> 
> if (EUD==FALSE) {
+   if (tpspC==FALSE) {
+     tauHM <- bind_rows(list(Xtau, TRI, MAI))
+     tauHMY <- tauHM %>% filter(year==Y)
+     write_csv(tauHMY, "results/tauHMY.csv")
+   }
+ } else {
+   # different variables
+   # tauHM <- bind_rows(list(Xtau, TRIEU, MAIEU))
+   # tauHMY <- tauHM %>% filter(year==Y)
+   # write_csv(tauHMY, "results/tauHMYEUD.csv")
+ }
> 
> # TRI and MAI
> 
> if (EUD==FALSE) {
+   if (tpspC==FALSE) {
+     trimai <- left_join(TRI %>% select(j_iso3, year, tau), MAI %>% select(i_iso3, year, tau), by=c("j_iso3"="i_iso3", "year")) %>% ungroup()
+     colnames(trimai) <- c("iso3", "year", "TRI", "MAI")
+     trimaiY <- trimai %>% filter(year==Y)
+     write_csv(trimaiY, "results/trimaiY.csv")
+   }
+ } else {
+   trimai <- TRIEU %>% ungroup()
+   write_csv(trimai, "results/triYEUD.csv")
+ }
> 
> 
> proc.time()
   user  system elapsed 
  2.097   0.186   2.294 
